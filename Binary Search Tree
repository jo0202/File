class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left_child = None
        self.right_child = None


class CustomBinaryTree:
    def __init__(self):
        self.root_node = None

    def add_value(self, value):
        # BST에 값 삽입
        if self.root_node is None:
            self.root_node = TreeNode(value)
        else:
            self._add_value_recursive(self.root_node, value)

    def _add_value_recursive(self, current_node, value):
        # 재귀적으로 BST 삽입 구현
        if value < current_node.value:
            if current_node.left_child is None:
                current_node.left_child = TreeNode(value)
            else:
                self._add_value_recursive(current_node.left_child, value)
        elif value > current_node.value:
            if current_node.right_child is None:
                current_node.right_child = TreeNode(value)
            else:
                self._add_value_recursive(current_node.right_child, value)

    def find_value(self, value):
        # 값 검색 및 경로 반환
        path_string = "R"  # 모든 경로는 "R"으로 시작
        result = self._find_value_recursive(self.root_node, value, path_string)
        return result if result is not None else "R-1"  # "R-1"은 검색 실패를 나타냄

    def _find_value_recursive(self, current_node, value, path_string):
        # 재귀적으로 값을 검색하며 경로 생성
        if current_node is None:
            return None
        if current_node.value == value:
            return path_string
        elif value < current_node.value:
            return self._find_value_recursive(current_node.left_child, value, path_string + "0")
        else:
            return self._find_value_recursive(current_node.right_child, value, path_string + "1")

    def remove_value(self, value):
        # 값 삭제
        self.root_node = self._remove_value_recursive(self.root_node, value)

    def _remove_value_recursive(self, current_node, value):
        # 재귀적으로 BST에서 값을 삭제
        if current_node is None:
            return None
        if value < current_node.value:
            current_node.left_child = self._remove_value_recursive(current_node.left_child, value)
        elif value > current_node.value:
            current_node.right_child = self._remove_value_recursive(current_node.right_child, value)
        else:
            # 삭제할 노드가 좌, 우 자식을 모두 가진 경우
            if current_node.left_child is None:
                return current_node.right_child
            elif current_node.right_child is None:
                return current_node.left_child
            else:
                # 오른쪽 Subtree에서 가장 작은 값을 찾아 대체
                successor = self._find_min_value(current_node.right_child)
                current_node.value = successor.value
                current_node.right_child = self._remove_value_recursive(current_node.right_child, successor.value)
        return current_node

    def _find_min_value(self, current_node):
        # 오른쪽 Subtree에서 가장 작은 값 찾기
        while current_node.left_child is not None:
            current_node = current_node.left_child
        return current_node


def handle_test_case(test_data):
    tree = CustomBinaryTree()
    output_results = []

    # 삽입 처리
    num_insert = int(test_data.pop(0))  # 삽입할 키의 개수
    insert_values = list(map(int, test_data.pop(0).split()))  # 삽입할 키들
    for value in insert_values:
        tree.add_value(value)

    # 삭제 전 검색 처리
    num_search1 = int(test_data.pop(0))  # 첫 번째 검색 키의 개수
    search_values1 = list(map(int, test_data.pop(0).split()))  # 검색 키들
    for value in search_values1:
        output_results.append(tree.find_value(value))

    # 삭제 처리
    num_delete = int(test_data.pop(0))  # 삭제할 키의 개수
    delete_values = list(map(int, test_data.pop(0).split()))  # 삭제할 키들
    for value in delete_values:
        tree.remove_value(value)

    # 삭제 후 검색 처리
    num_search2 = int(test_data.pop(0))  # 두 번째 검색 키의 개수
    search_values2 = list(map(int, test_data.pop(0).split()))  # 검색 키들
    for value in search_values2:
        output_results.append(tree.find_value(value))

    return output_results


def main():
    # 입력 파일 읽기
    with open("bst_input.txt", "r") as file:
        input_lines = file.read().strip().split("\n")

    num_test_cases = int(input_lines.pop(0))  # 테스트 케이스 개수
    final_results = []

    for _ in range(num_test_cases):
        case_lines = []
        for _ in range(8):  # 각 테스트 케이스는 8줄로 구성
            case_lines.append(input_lines.pop(0))
        final_results.extend(handle_test_case(case_lines))

    # 출력 파일 작성
    with open("bst_output.txt", "w") as file:
        for result in final_results:
            if result == "R-1":
                file.write("Key not found\n")  # 검색 실패 메시지
            else:
                file.write(result + "\n")


if __name__ == "__main__":
    main()
